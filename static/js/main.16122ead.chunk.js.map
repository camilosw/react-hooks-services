{"version":3,"sources":["services/usePostStarshipService.ts","components/Loader.tsx","components/CreateStarship.tsx","services/useStarshipsService.ts","services/useSingleStarshipService.ts","components/Starship.tsx","components/Starships.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["usePostStarshipService","_useState","useState","status","_useState2","Object","slicedToArray","result","setResult","publishStarship","starship","headers","Headers","append","Promise","resolve","reject","fetch","method","body","JSON","stringify","then","response","json","payload","catch","error","Loader","react","className","CreateStarship","initialStarshipState","name","crew","passengers","cost_in_credits","_React$useState","React","_React$useState2","setStarship","_usePostStarshipServi","handleChange","event","persist","prevStarship","objectSpread","defineProperty","target","value","onSubmit","preventDefault","type","onChange","components_Loader","useStarshipsService","useEffect","useSingleStarshipService","url","Starship","_ref","onClose","useStarshipByIdService","onClick","parseInt","Intl","NumberFormat","format","Starships","starships","setUrl","results","map","index","key","components_Starship","App","react_default","a","createElement","components_Starships","components_CreateStarship","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.16122ead.chunk.js","sourcesContent":["import { useState } from 'react';\nimport { Service } from '../types/Service';\nimport { Starship } from '../types/Starship';\n\nexport type PostStarship = Pick<\n  Starship,\n  'name' | 'crew' | 'passengers' | 'cost_in_credits'\n>;\n\nconst usePostStarshipService = () => {\n  const [result, setResult] = useState<Service<PostStarship>>({\n    status: 'init'\n  });\n\n  const publishStarship = (starship: PostStarship) => {\n    setResult({ status: 'loading' });\n\n    const headers = new Headers();\n    headers.append('Content-Type', 'application/json; charset=utf-8');\n\n    return new Promise((resolve, reject) => {\n      fetch('https://swapi.co/api/starships', {\n        method: 'POST',\n        body: JSON.stringify(starship),\n        headers\n      })\n        .then(response => response.json())\n        .then(response => {\n          setResult({ status: 'loaded', payload: response });\n          resolve(response);\n        })\n        .catch(error => {\n          setResult({ status: 'error', error });\n          reject(error);\n        });\n    });\n  };\n\n  return {\n    result,\n    publishStarship\n  };\n};\n\nexport default usePostStarshipService;\n","import * as React from 'react';\n\nconst Loader: React.FC<{}> = () => <div className=\"loader\" />;\n\nexport default Loader;\n","import * as React from 'react';\nimport usePostStarshipService, {\n  PostStarship\n} from '../services/usePostStarshipService';\nimport Loader from './Loader';\n\nconst CreateStarship: React.FC<{}> = () => {\n  const initialStarshipState: PostStarship = {\n    name: '',\n    crew: '',\n    passengers: '',\n    cost_in_credits: ''\n  };\n  const [starship, setStarship] = React.useState<PostStarship>(\n    initialStarshipState\n  );\n  const { result, publishStarship } = usePostStarshipService();\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    event.persist();\n    setStarship(prevStarship => ({\n      ...prevStarship,\n      [event.target.name]: event.target.value\n    }));\n  };\n\n  const handleFormSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    publishStarship(starship).then(() => setStarship(initialStarshipState));\n  };\n\n  return (\n    <div className=\"card sell-starship\">\n      <p className=\"form-title\">Do you have a starship to sell?</p>\n      <form onSubmit={handleFormSubmit}>\n        <div>\n          <label>Name</label>\n          <input\n            type=\"text\"\n            name=\"name\"\n            value={starship.name}\n            onChange={handleChange}\n          />\n        </div>\n        <div>\n          <label>Price</label>\n          <input\n            type=\"text\"\n            name=\"cost_in_credits\"\n            value={starship.cost_in_credits}\n            onChange={handleChange}\n          />\n        </div>\n        <div>\n          <label>Crew</label>\n          <input\n            type=\"text\"\n            name=\"crew\"\n            value={starship.crew}\n            onChange={handleChange}\n          />\n        </div>\n        <div>\n          <label>Passengers</label>\n          <input\n            type=\"text\"\n            name=\"passengers\"\n            value={starship.passengers}\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"button-container\">\n          <button type=\"submit\">Send</button>\n        </div>\n      </form>\n\n      {result.status === 'loading' && (\n        <div className=\"loader-container\">\n          <Loader />\n        </div>\n      )}\n      {result.status === 'loaded' && (\n        <div>Your starship has been submitted.</div>\n      )}\n      {result.status === 'error' && (\n        <div>\n          A disturbance in the force prevented your starship to be submitted.\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default CreateStarship;\n","import { useEffect, useState } from 'react';\nimport { Service } from '../types/Service';\nimport { Starship } from '../types/Starship';\n\nexport interface Starships {\n  results: Starship[];\n}\n\nconst useStarshipsService = () => {\n  const [result, setResult] = useState<Service<Starships>>({\n    status: 'loading'\n  });\n\n  useEffect(() => {\n    fetch('https://swapi.co/api/starships')\n      .then(response => response.json())\n      .then(response => setResult({ status: 'loaded', payload: response }))\n      .catch(error => setResult({ status: 'error', error }));\n  }, []);\n\n  return result;\n};\n\nexport default useStarshipsService;\n","import { useEffect, useState } from 'react';\nimport { Service } from '../types/Service';\nimport { Starship } from '../types/Starship';\n\nconst useSingleStarshipService = (url: string) => {\n  const [result, setResult] = useState<Service<Starship>>({\n    status: 'init'\n  });\n\n  useEffect(() => {\n    if (url) {\n      setResult({ status: 'loading' });\n      fetch(url)\n        .then(response => response.json())\n        .then(response => setResult({ status: 'loaded', payload: response }))\n        .catch(error => setResult({ status: 'error', error }));\n    }\n  }, [url]);\n\n  return result;\n};\n\nexport default useSingleStarshipService;\n","import * as React from 'react';\nimport useStarshipByIdService from '../services/useSingleStarshipService';\nimport Loader from './Loader';\n\nexport interface Props {\n  url: string;\n  onClose(): void;\n}\n\nconst Starship: React.FC<Props> = ({ url, onClose }) => {\n  const starship = useStarshipByIdService(url);\n\n  return (\n    <div className=\"starship-modal-container\">\n      <div className=\"starship-modal-background\" onClick={onClose} />\n\n      {starship.status === 'loading' && <Loader />}\n\n      {starship.status === 'loaded' && (\n        <div className=\"starship\">\n          <h2>{starship.payload.name}</h2>\n\n          <div className=\"price\">\n            {!!starship.payload.cost_in_credits &&\n            parseInt(starship.payload.cost_in_credits) ? (\n              <>\n                {new Intl.NumberFormat('en-US').format(\n                  parseInt(starship.payload.cost_in_credits)\n                )}{' '}\n                Credits\n              </>\n            ) : (\n              'Call us for price'\n            )}\n          </div>\n\n          <div className=\"starship-info\">\n            <div className=\"starship-info-item\">\n              <div className=\"label\">Crew</div>\n              <div className=\"data\">{starship.payload.crew}</div>\n            </div>\n            <div className=\"starship-info-item\">\n              <div className=\"label\">Passengers</div>\n              <div className=\"data\">{starship.payload.passengers}</div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {starship.status === 'error' && (\n        <div className=\"starship\">\n          Error, something weird happened with the starship.\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Starship;\n","import * as React from 'react';\nimport useStarshipsService from '../services/useStarshipsService';\nimport Loader from './Loader';\nimport Starship from './Starship';\n\nconst Starships: React.FC<{}> = () => {\n  const starships = useStarshipsService();\n  const [url, setUrl] = React.useState('');\n\n  return (\n    <>\n      <div className=\"card\">\n        {starships.status === 'loading' && (\n          <div className=\"loader-container\">\n            <Loader />\n          </div>\n        )}\n        {starships.status === 'loaded' &&\n          starships.payload.results.map((starship, index) => (\n            <div\n              className=\"starship-item\"\n              onClick={() => setUrl(starship.url)}\n              key={index}\n            >\n              {starship.name}\n            </div>\n          ))}\n        {!!url && <Starship url={url} onClose={() => setUrl('')} />}\n      </div>\n      {starships.status === 'error' && (\n        <div>Error, the backend moved to the dark side.</div>\n      )}\n    </>\n  );\n};\n\nexport default Starships;\n","import React, { Component } from 'react';\nimport CreateStarship from './components/CreateStarship';\nimport Starships from './components/Starships';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"header\">\n          <div className=\"container\">\n            <h1>Starships For Sale </h1>\n            <p className=\"slogan\">\n              No matter what's your side on the force, we sell you the starship\n              of your dreams.\n            </p>\n          </div>\n        </header>\n        <div className=\"container\">\n          <Starships />\n          <CreateStarship />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './styles.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}